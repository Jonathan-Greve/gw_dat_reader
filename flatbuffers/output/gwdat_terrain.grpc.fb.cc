// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gwdat_terrain

#include "gwdat_terrain_generated.h"
#include "gwdat_terrain.grpc.fb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GWDat {

static const char* TerrainService_method_names[] = {
  "/GWDat.TerrainService/GetTerrain",
};

std::unique_ptr< TerrainService::Stub> TerrainService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& /*options*/) {
  std::unique_ptr< TerrainService::Stub> stub(new TerrainService::Stub(channel));
  return stub;
}

TerrainService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_GetTerrain_(TerrainService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status TerrainService::Stub::GetTerrain(::grpc::ClientContext* context, const flatbuffers::grpc::Message<TerrainRequest>& request, flatbuffers::grpc::Message<TerrainReply>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTerrain_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<TerrainReply>>* TerrainService::Stub::AsyncGetTerrainRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<TerrainRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<TerrainReply>>::Create(channel_.get(), cq, rpcmethod_GetTerrain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<TerrainReply>>* TerrainService::Stub::PrepareAsyncGetTerrainRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<TerrainRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<TerrainReply>>::Create(channel_.get(), cq, rpcmethod_GetTerrain_, context, request, false);
}

TerrainService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TerrainService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TerrainService::Service, flatbuffers::grpc::Message<TerrainRequest>, flatbuffers::grpc::Message<TerrainReply>>(
          std::mem_fn(&TerrainService::Service::GetTerrain), this)));
}

TerrainService::Service::~Service() {
}

::grpc::Status TerrainService::Service::GetTerrain(::grpc::ServerContext* /*context*/, const flatbuffers::grpc::Message<TerrainRequest>* /*request*/, flatbuffers::grpc::Message<TerrainReply>* /*response*/) {
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GWDat

